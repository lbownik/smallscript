package ss.parser;

import ss.runtime.SSObject;
import ss.runtime.SSVariableReference;

/*******************************************************************************
 * @author lukasz.bownik@gmail.com
 ******************************************************************************/
public final class Symbol implements Expression {

    /****************************************************************************
     * 
    ****************************************************************************/
    public Symbol(final String value) {

        ensureProperSymbol(value);
        this.value = value;
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    private static void ensureProperSymbol(final String value) {

        final var index = value.indexOf(':');
        if (index == -1 | index == 0 | index == (value.length() - 1)) {
            if (value.indexOf(':', index + 1) > -1) {
                throw new RuntimeException("Invalid symbol '" + value + "'.");
            }
        } else {
            throw new RuntimeException("Invalid symbol '" + value + "'.");
        }
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    @Override
    public String value() {

        return this.value;
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isVariableDeclaration() {

        return this.value.startsWith(":");
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isVariable() {

        return isVariableDeclaration() || isNoArgMethod();
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isMethod() {

        return !isVariableDeclaration();
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isMethodWithArgs() {

        return this.value.endsWith(":");
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isNoArgMethod() {

        return !isMethodWithArgs() && !isAssignment();
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isAssignment() {

        return this.value.equals("=");
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public boolean isVariableBlockSaperator() {

        return this.value.equals("|");
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    @Override
    public String toString() {

        return this.value;
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    @Override
    public int hashCode() {

        return this.value.hashCode();
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    @Override
    public boolean equals(final Object o) {

        return getClass() == o.getClass() && this.value.equals(((Symbol) o).value);
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    public SSObject toSSObject() {

        return new SSVariableReference(this.value);
    }

    /****************************************************************************
     * 
    ****************************************************************************/
    private final String value;
}
